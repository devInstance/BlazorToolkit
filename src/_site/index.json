{
  "api/DevInstance.BlazorToolkit.Http.ApiUrlBuilder.html": {
    "href": "api/DevInstance.BlazorToolkit.Http.ApiUrlBuilder.html",
    "title": "Class ApiUrlBuilder | Blazor Toolkit",
    "keywords": "Class ApiUrlBuilder Namespace DevInstance.BlazorToolkit.Http Assembly DevInstance.BlazorToolkit.dll The ApiUrlBuilder class is used to construct URLs for API endpoints. It allows adding path segments and query parameters to the URL. var url = ApiUrlBuilder.Create(\"api/companies\").Path(id).Path(\"employees\").Query(\"firstname\", \"John\"); Console.Write(url); Result: api/companies/92387/employees?firstname=John public class ApiUrlBuilder Inheritance object ApiUrlBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields _path List to store path segments. protected List<string> _path Field Value List<string> _queryParameters Dictionary to store query parameters. protected Dictionary<string, object> _queryParameters Field Value Dictionary<string, object> Methods Create(string) Creates a new instance of the ApiUrlBuilder class with the specified path. public static ApiUrlBuilder Create(string path) Parameters path string The initial path for the URL. Returns ApiUrlBuilder A new instance of the ApiUrlBuilder class. Path(string?) Adds a path segment to the URL. public ApiUrlBuilder Path(string? value) Parameters value string The path segment to add. Returns ApiUrlBuilder The current instance of ApiUrlBuilder. Query(string, object?) Adds a query parameter to the URL. public ApiUrlBuilder Query(string name, object? value) Parameters name string The name of the query parameter. value object The value of the query parameter. Returns ApiUrlBuilder The current instance of ApiUrlBuilder. ToString() Converts the constructed URL to a string. public override string ToString() Returns string The constructed URL as a string."
  },
  "api/DevInstance.BlazorToolkit.Http.HttpApiContextFactory.html": {
    "href": "api/DevInstance.BlazorToolkit.Http.HttpApiContextFactory.html",
    "title": "Class HttpApiContextFactory | Blazor Toolkit",
    "keywords": "Class HttpApiContextFactory Namespace DevInstance.BlazorToolkit.Http Assembly DevInstance.BlazorToolkit.dll Factory class for creating instances of IApiContext<T>. public class HttpApiContextFactory Inheritance object HttpApiContextFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpApiContextFactory(IHttpClientFactory) Initializes a new instance of the HttpApiContextFactory class. public HttpApiContextFactory(IHttpClientFactory factory) Parameters factory IHttpClientFactory The HTTP client factory. Methods Create<T>(HttpClient, string) Creates an instance of IApiContext<T> using the specified HTTP client and URL. public static IApiContext<T> Create<T>(HttpClient http, string url) Parameters http HttpClient The HTTP client. url string The URL for the API context. Returns IApiContext<T> An instance of IApiContext<T>. Type Parameters T The type of the entity. Create<T>(string, string) Creates an instance of IApiContext<T> using the specified client name and URL. public IApiContext<T> Create<T>(string clientName, string url) Parameters clientName string The name of the HTTP client. url string The URL for the API context. Returns IApiContext<T> An instance of IApiContext<T>. Type Parameters T The type of the entity."
  },
  "api/DevInstance.BlazorToolkit.Http.IApiContext-1.html": {
    "href": "api/DevInstance.BlazorToolkit.Http.IApiContext-1.html",
    "title": "Interface IApiContext<T> | Blazor Toolkit",
    "keywords": "Interface IApiContext<T> Namespace DevInstance.BlazorToolkit.Http Assembly DevInstance.BlazorToolkit.dll Interface for API context operations. public interface IApiContext<T> Type Parameters T The type of the entity. Methods Delete(string?) Deletes an entity by ID. IApiContext<T> Delete(string? id) Parameters id string The ID of the entity. Returns IApiContext<T> The API context. ExecuteAsync() Executes the API context operation asynchronously. Task<T?> ExecuteAsync() Returns Task<T> The entity. Get(string?) Gets an entity by ID. IApiContext<T> Get(string? id = null) Parameters id string The ID of the entity. Returns IApiContext<T> The API context. ListAsync() Lists the entities asynchronously. Task<ModelList<T>?> ListAsync() Returns Task<ModelList<T>> A list of entities. Page(int) Sets the page number for pagination. IApiContext<T> Page(int page) Parameters page int The page number. Returns IApiContext<T> The API context. Post(T) Posts a new entity. IApiContext<T> Post(T obj) Parameters obj T The entity to post. Returns IApiContext<T> The API context. Put(string?, T) Puts (updates) an entity by ID. IApiContext<T> Put(string? id, T obj) Parameters id string The ID of the entity. obj T The entity to update. Returns IApiContext<T> The API context. Search(string) Searches for entities by a key. IApiContext<T> Search(string key) Parameters key string The search key. Returns IApiContext<T> The API context. Sort(string, bool) Sorts the entities by a key. IApiContext<T> Sort(string key, bool isAsc) Parameters key string The key to sort by. isAsc bool If true, sorts in ascending order; otherwise, sorts in descending order. Returns IApiContext<T> The API context. Top(int) Limits the number of entities to retrieve. IApiContext<T> Top(int top) Parameters top int The number of entities to retrieve. Returns IApiContext<T> The API context."
  },
  "api/DevInstance.BlazorToolkit.Http.html": {
    "href": "api/DevInstance.BlazorToolkit.Http.html",
    "title": "Namespace DevInstance.BlazorToolkit.Http | Blazor Toolkit",
    "keywords": "Namespace DevInstance.BlazorToolkit.Http Classes ApiUrlBuilder The ApiUrlBuilder class is used to construct URLs for API endpoints. It allows adding path segments and query parameters to the URL. var url = ApiUrlBuilder.Create(\"api/companies\").Path(id).Path(\"employees\").Query(\"firstname\", \"John\"); Console.Write(url); Result: api/companies/92387/employees?firstname=John HttpApiContextFactory Factory class for creating instances of IApiContext<T>. Interfaces IApiContext<T> Interface for API context operations."
  },
  "api/DevInstance.BlazorToolkit.Model.ModelItem.html": {
    "href": "api/DevInstance.BlazorToolkit.Model.ModelItem.html",
    "title": "Class ModelItem | Blazor Toolkit",
    "keywords": "Class ModelItem Namespace DevInstance.BlazorToolkit.Model Assembly DevInstance.BlazorToolkit.dll Represents an item in the model with a unique identifier. public class ModelItem Inheritance object ModelItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the public id of the object assigned by the server. public string Id { get; set; } Property Value string"
  },
  "api/DevInstance.BlazorToolkit.Model.ModelList-1.html": {
    "href": "api/DevInstance.BlazorToolkit.Model.ModelList-1.html",
    "title": "Class ModelList<T> | Blazor Toolkit",
    "keywords": "Class ModelList<T> Namespace DevInstance.BlazorToolkit.Model Assembly DevInstance.BlazorToolkit.dll Represents a list of models with pagination, sorting, and filtering capabilities. public class ModelList<T> Type Parameters T The type of the items in the list. Inheritance object ModelList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets or sets the count of items in the selected time range. public int Count { get; set; } Property Value int Fields Gets or sets the fields to include in the response. public int Fields { get; set; } Property Value int Filter Gets or sets the filter value. public int Filter { get; set; } Property Value int IsAsc Gets or sets a value indicating whether to sort in ascending order. public bool IsAsc { get; set; } Property Value bool Items Gets or sets the array of items. public T[] Items { get; set; } Property Value T[] Page Gets or sets the selected page index (starting from 0). public int Page { get; set; } Property Value int PagesCount Gets or sets the total count of pages. public int PagesCount { get; set; } Property Value int Search Gets or sets the search string. public string Search { get; set; } Property Value string SortBy Gets or sets the column name to sort by. public string SortBy { get; set; } Property Value string TotalCount Gets or sets the total count of items. public int TotalCount { get; set; } Property Value int"
  },
  "api/DevInstance.BlazorToolkit.Model.html": {
    "href": "api/DevInstance.BlazorToolkit.Model.html",
    "title": "Namespace DevInstance.BlazorToolkit.Model | Blazor Toolkit",
    "keywords": "Namespace DevInstance.BlazorToolkit.Model Classes ModelItem Represents an item in the model with a unique identifier. ModelList<T> Represents a list of models with pagination, sorting, and filtering capabilities."
  },
  "api/DevInstance.BlazorToolkit.Services.IServiceExecutionHost.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.IServiceExecutionHost.html",
    "title": "Interface IServiceExecutionHost | Blazor Toolkit",
    "keywords": "Interface IServiceExecutionHost Namespace DevInstance.BlazorToolkit.Services Assembly DevInstance.BlazorToolkit.dll Interface for the service execution host. This should be implemented by the component to handle the service call status and errors. public interface IServiceExecutionHost Extension Methods ServiceCallExtensions.BeginServiceCall(IServiceExecutionHost, IScopeLog) ServiceCallExtensions.ServiceCallAsync<T>(IServiceExecutionHost, PerformAsyncCallHandler<T>, Action<T>, Func<T, Task>, Action<ServiceActionError[]>, Action, bool) Properties ErrorMessage Error message from the service call (when IsError is true) string ErrorMessage { get; set; } Property Value string InProgress Flag to indicate if the service call is in progress bool InProgress { get; set; } Property Value bool IsError Flag to indicate if the service call has an error bool IsError { get; set; } Property Value bool Methods ShowLogin() The implementation of this method should navigate to the login page void ShowLogin() StateHasChanged() The implementation of this method should call the StateHasChanged method to re-render the page void StateHasChanged()"
  },
  "api/DevInstance.BlazorToolkit.Services.PerformAsyncCallHandler-1.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.PerformAsyncCallHandler-1.html",
    "title": "Delegate PerformAsyncCallHandler<T> | Blazor Toolkit",
    "keywords": "Delegate PerformAsyncCallHandler<T> Namespace DevInstance.BlazorToolkit.Services Assembly DevInstance.BlazorToolkit.dll Delegate for performing an asynchronous service call that returns a ServiceActionResult. public delegate Task<ServiceActionResult<T>> PerformAsyncCallHandler<T>() Returns Task<ServiceActionResult<T>> A task that represents the asynchronous operation, containing the ServiceActionResult. Type Parameters T The type of the result returned by the service call."
  },
  "api/DevInstance.BlazorToolkit.Services.Server.ServiceUtils.ServiceHandlerAsync-1.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.Server.ServiceUtils.ServiceHandlerAsync-1.html",
    "title": "Delegate ServiceUtils.ServiceHandlerAsync<T> | Blazor Toolkit",
    "keywords": "Delegate ServiceUtils.ServiceHandlerAsync<T> Namespace DevInstance.BlazorToolkit.Services.Server Assembly DevInstance.BlazorToolkit.dll Delegate for asynchronous service handlers. public delegate Task<T> ServiceUtils.ServiceHandlerAsync<T>(IScopeLog log) Parameters log IScopeLog The logging scope. Returns Task<T> A task that represents the asynchronous operation, containing the result of type T. Type Parameters T The type of the result returned by the service handler."
  },
  "api/DevInstance.BlazorToolkit.Services.Server.ServiceUtils.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.Server.ServiceUtils.html",
    "title": "Class ServiceUtils | Blazor Toolkit",
    "keywords": "Class ServiceUtils Namespace DevInstance.BlazorToolkit.Services.Server Assembly DevInstance.BlazorToolkit.dll Utility class for handling service calls with logging and error handling. public static class ServiceUtils Inheritance object ServiceUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleServiceCallAsync<T>(IScopeLog, ServiceHandlerAsync<T>) Handles a service call asynchronously with logging and error handling. public static Task<ServiceActionResult<T>> HandleServiceCallAsync<T>(IScopeLog log, ServiceUtils.ServiceHandlerAsync<T> handler) Parameters log IScopeLog The logging scope. handler ServiceUtils.ServiceHandlerAsync<T> The service handler to execute. Returns Task<ServiceActionResult<T>> A task that represents the asynchronous operation, containing a ServiceActionResult of type T. Type Parameters T The type of the result returned by the service handler."
  },
  "api/DevInstance.BlazorToolkit.Services.Server.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.Server.html",
    "title": "Namespace DevInstance.BlazorToolkit.Services.Server | Blazor Toolkit",
    "keywords": "Namespace DevInstance.BlazorToolkit.Services.Server Classes ServiceUtils Utility class for handling service calls with logging and error handling. Delegates ServiceUtils.ServiceHandlerAsync<T> Delegate for asynchronous service handlers."
  },
  "api/DevInstance.BlazorToolkit.Services.ServiceActionError.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.ServiceActionError.html",
    "title": "Class ServiceActionError | Blazor Toolkit",
    "keywords": "Class ServiceActionError Namespace DevInstance.BlazorToolkit.Services Assembly DevInstance.BlazorToolkit.dll Represents an error that occurs during a service action. public class ServiceActionError Inheritance object ServiceActionError Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message Gets or sets the error message. public string Message { get; set; } Property Value string"
  },
  "api/DevInstance.BlazorToolkit.Services.ServiceActionResult-1.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.ServiceActionResult-1.html",
    "title": "Class ServiceActionResult<T> | Blazor Toolkit",
    "keywords": "Class ServiceActionResult<T> Namespace DevInstance.BlazorToolkit.Services Assembly DevInstance.BlazorToolkit.dll Class to hold the result of the service action. public class ServiceActionResult<T> Type Parameters T The type of the result. Inheritance object ServiceActionResult<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Errors Gets or sets the errors that occurred during the service action. public ServiceActionError[]? Errors { get; set; } Property Value ServiceActionError[] IsAuthorized Gets or sets a value indicating whether the user is authorized to perform the service action. public bool IsAuthorized { get; set; } Property Value bool Result Gets or sets the result of the service action. public T? Result { get; set; } Property Value T Success Gets or sets a value indicating whether the service action was successful. public bool Success { get; set; } Property Value bool"
  },
  "api/DevInstance.BlazorToolkit.Services.ServiceCallExtensions.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.ServiceCallExtensions.html",
    "title": "Class ServiceCallExtensions | Blazor Toolkit",
    "keywords": "Class ServiceCallExtensions Namespace DevInstance.BlazorToolkit.Services Assembly DevInstance.BlazorToolkit.dll Provides extension methods for service call execution. public static class ServiceCallExtensions Inheritance object ServiceCallExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BeginServiceCall(IServiceExecutionHost, IScopeLog) Begins a service call and returns a ServiceExecutionHandler. public static ServiceExecutionHandler BeginServiceCall(this IServiceExecutionHost host, IScopeLog log = null) Parameters host IServiceExecutionHost The service execution host. log IScopeLog Optional log scope. Returns ServiceExecutionHandler A ServiceExecutionHandler instance. ServiceCallAsync<T>(IServiceExecutionHost, PerformAsyncCallHandler<T>, Action<T>, Func<T, Task>, Action<ServiceActionError[]>, Action, bool) Executes an asynchronous service call. public static Task ServiceCallAsync<T>(this IServiceExecutionHost host, PerformAsyncCallHandler<T> handler, Action<T> success = null, Func<T, Task> sucessAsync = null, Action<ServiceActionError[]> error = null, Action before = null, bool enableProgress = true) Parameters host IServiceExecutionHost The service execution host. handler PerformAsyncCallHandler<T> The handler to perform the asynchronous call. success Action<T> Optional success callback. sucessAsync Func<T, Task> Optional asynchronous success callback. error Action<ServiceActionError[]> Optional error callback. before Action Optional callback to execute before the service call. enableProgress bool Flag to enable progress indication. Returns Task A task representing the asynchronous operation. Type Parameters T The type of the result."
  },
  "api/DevInstance.BlazorToolkit.Services.ServiceExecutionHandler.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.ServiceExecutionHandler.html",
    "title": "Class ServiceExecutionHandler | Blazor Toolkit",
    "keywords": "Class ServiceExecutionHandler Namespace DevInstance.BlazorToolkit.Services Assembly DevInstance.BlazorToolkit.dll Handles the execution of service calls, managing their progress, success, and error states. public class ServiceExecutionHandler Inheritance object ServiceExecutionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceExecutionHandler(IScopeLog, IServiceExecutionHost) Initializes a new instance of the ServiceExecutionHandler class. public ServiceExecutionHandler(IScopeLog l, IServiceExecutionHost basePage) Parameters l IScopeLog The scope log for tracing. basePage IServiceExecutionHost The base page that implements IServiceExecutionHost. Methods DispatchCall<T>(PerformAsyncCallHandler<T>, Action<T>, Func<T, Task>, Action<ServiceActionError[]>, Action, bool) Dispatches a service call to be executed. public ServiceExecutionHandler DispatchCall<T>(PerformAsyncCallHandler<T> handler, Action<T> success = null, Func<T, Task> sucessAsync = null, Action<ServiceActionError[]> error = null, Action before = null, bool enableProgress = true) Parameters handler PerformAsyncCallHandler<T> The handler that performs the service call. success Action<T> The action to execute if the service call is successful. sucessAsync Func<T, Task> The asynchronous action to execute if the service call is successful. error Action<ServiceActionError[]> The action to execute if the service call encounters errors. before Action The action to execute before the service call. enableProgress bool Indicates whether to show progress during the service call. Returns ServiceExecutionHandler The current instance of ServiceExecutionHandler. Type Parameters T The type of the result returned by the service call. ExecuteAsync() Executes all dispatched service calls asynchronously. public Task ExecuteAsync() Returns Task A task that represents the asynchronous operation."
  },
  "api/DevInstance.BlazorToolkit.Services.Wasm.ResultHandler-1.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.Wasm.ResultHandler-1.html",
    "title": "Delegate ResultHandler<T> | Blazor Toolkit",
    "keywords": "Delegate ResultHandler<T> Namespace DevInstance.BlazorToolkit.Services.Wasm Assembly DevInstance.BlazorToolkit.dll public delegate void ResultHandler<T>(T result) Parameters result T Type Parameters T"
  },
  "api/DevInstance.BlazorToolkit.Services.Wasm.ServiceUtils.WebApiHandlerAsync-1.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.Wasm.ServiceUtils.WebApiHandlerAsync-1.html",
    "title": "Delegate ServiceUtils.WebApiHandlerAsync<T> | Blazor Toolkit",
    "keywords": "Delegate ServiceUtils.WebApiHandlerAsync<T> Namespace DevInstance.BlazorToolkit.Services.Wasm Assembly DevInstance.BlazorToolkit.dll Delegate for handling asynchronous web API calls. public delegate Task<T> ServiceUtils.WebApiHandlerAsync<T>(IScopeLog log) Parameters log IScopeLog The log scope for tracing. Returns Task<T> A task representing the asynchronous operation, with a result of type T. Type Parameters T The type of the result returned by the web API call."
  },
  "api/DevInstance.BlazorToolkit.Services.Wasm.ServiceUtils.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.Wasm.ServiceUtils.html",
    "title": "Class ServiceUtils | Blazor Toolkit",
    "keywords": "Class ServiceUtils Namespace DevInstance.BlazorToolkit.Services.Wasm Assembly DevInstance.BlazorToolkit.dll Utility class for handling web API calls. public static class ServiceUtils Inheritance object ServiceUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleWebApiCallAsync<T>(WebApiHandlerAsync<T>, IScopeLog) public static Task<ServiceActionResult<T>> HandleWebApiCallAsync<T>(ServiceUtils.WebApiHandlerAsync<T> handler, IScopeLog log = null) Parameters handler ServiceUtils.WebApiHandlerAsync<T> log IScopeLog Returns Task<ServiceActionResult<T>> Type Parameters T"
  },
  "api/DevInstance.BlazorToolkit.Services.Wasm.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.Wasm.html",
    "title": "Namespace DevInstance.BlazorToolkit.Services.Wasm | Blazor Toolkit",
    "keywords": "Namespace DevInstance.BlazorToolkit.Services.Wasm Classes ServiceUtils Utility class for handling web API calls. Delegates ResultHandler<T> ServiceUtils.WebApiHandlerAsync<T> Delegate for handling asynchronous web API calls."
  },
  "api/DevInstance.BlazorToolkit.Services.html": {
    "href": "api/DevInstance.BlazorToolkit.Services.html",
    "title": "Namespace DevInstance.BlazorToolkit.Services | Blazor Toolkit",
    "keywords": "Namespace DevInstance.BlazorToolkit.Services Classes ServiceActionError Represents an error that occurs during a service action. ServiceActionResult<T> Class to hold the result of the service action. ServiceCallExtensions Provides extension methods for service call execution. ServiceExecutionHandler Handles the execution of service calls, managing their progress, success, and error states. Interfaces IServiceExecutionHost Interface for the service execution host. This should be implemented by the component to handle the service call status and errors. Delegates PerformAsyncCallHandler<T> Delegate for performing an asynchronous service call that returns a ServiceActionResult."
  },
  "api/DevInstance.BlazorToolkit.Utils.IdGenerator.html": {
    "href": "api/DevInstance.BlazorToolkit.Utils.IdGenerator.html",
    "title": "Class IdGenerator | Blazor Toolkit",
    "keywords": "Class IdGenerator Namespace DevInstance.BlazorToolkit.Utils Assembly DevInstance.BlazorToolkit.dll Transforms Guid into a case sensitive string representation using letters and numbers. Example: var id = IdGenerator.New(); Console.WriteLine(id); Result: Console >> 14r9sb94vd36c4842avdt1j9of5asf22 public class IdGenerator Inheritance object IdGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromGuid(Guid) Transforms Guid into a case sensitive string representation public static string FromGuid(Guid guid) Parameters guid Guid Returns string A string, example: 14r9sb94vd36c4842avdt1j9of5asf22 New() Generates a new unique id public static string New() Returns string unique string. Example: 14r9sb94vd36c4842avdt1j9of5asf22"
  },
  "api/DevInstance.BlazorToolkit.Utils.html": {
    "href": "api/DevInstance.BlazorToolkit.Utils.html",
    "title": "Namespace DevInstance.BlazorToolkit.Utils | Blazor Toolkit",
    "keywords": "Namespace DevInstance.BlazorToolkit.Utils Classes IdGenerator Transforms Guid into a case sensitive string representation using letters and numbers. Example: var id = IdGenerator.New(); Console.WriteLine(id); Result: Console >> 14r9sb94vd36c4842avdt1j9of5asf22"
  },
  "api/DevInstance.BlazorToolkit.Validators.FluentValidator.html": {
    "href": "api/DevInstance.BlazorToolkit.Validators.FluentValidator.html",
    "title": "Class FluentValidator | Blazor Toolkit",
    "keywords": "Class FluentValidator Namespace DevInstance.BlazorToolkit.Validators Assembly DevInstance.BlazorToolkit.dll A Blazor component that integrates FluentValidation with EditContext. public class FluentValidator : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase FluentValidator Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.BuildRenderTree(RenderTreeBuilder) ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ValidatorType The type of the validator to be used. [Parameter] public Type ValidatorType { get; set; } Property Value Type Methods AddValidationResult(object, ValidationResult) Adds validation results to the ValidationMessageStore. public void AddValidationResult(object model, ValidationResult validationResult) Parameters model object The model being validated. validationResult ValidationResult The validation results. SetParametersAsync(ParameterView) Sets parameters supplied by the component's parent in the render tree. public override Task SetParametersAsync(ParameterView parameters) Parameters parameters ParameterView The parameters to set. Returns Task A Task that represents the asynchronous operation."
  },
  "api/DevInstance.BlazorToolkit.Validators.html": {
    "href": "api/DevInstance.BlazorToolkit.Validators.html",
    "title": "Namespace DevInstance.BlazorToolkit.Validators | Blazor Toolkit",
    "keywords": "Namespace DevInstance.BlazorToolkit.Validators Classes FluentValidator A Blazor component that integrates FluentValidation with EditContext."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Blazor Toolkit",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Blazor Toolkit",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Blazor Toolkit",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}