@page "/prerender"
@using DevInstance.BlazorToolkit.Components
@using DevInstance.BlazorToolkit.Extensions
@using DevInstance.BlazorToolkit.Samples.Model
@using DevInstance.BlazorToolkit.Samples.Client.Services
@using DevInstance.BlazorToolkit.Services
@using DevInstance.BlazorToolkit.Services.Wasm
@using DevInstance.BlazorToolkit.Validators
@using DevInstance.LogScope
@using DevInstance.WebServiceToolkit.Common.Model
@using FluentValidation.Results

@inherits ServiceExecutionHostComponent

@rendermode InteractiveWebAssembly

<PageTitle>Employee List</PageTitle>

<ErrorMessageBanner IsError="IsError" Message="@ErrorMessage"></ErrorMessageBanner>
<div class="px-4 py-5 my-5 text-center">
    <h1 class="display-5 fw-bold text-body-emphasis">Todo List (Prerender)</h1>

    <div class="col-lg-6 mx-auto">
        <p class="lead mb-4">Welcome to the todo list page. It shows how to use the Blazor Toolkit components.</p>
        <p><a href="/">WASM Version</a></p>
        <EditForm Model="newTodo" OnValidSubmit="AddTodo">
            <ServiceResultValidationEx @ref="nameValidator" CssProviderType="BootstrapFieldCssClassProvider"></ServiceResultValidationEx>
            <div class="add-todo-form">
                <div class="input-group has-validation mb-3">
                    <InputText @bind-Value="@newTodo.Title" class="form-control" placeholder="Add a new task..." @oninput="HandleInput" disabled="@InProgress" />
                    <button class="btn btn-primary" type="submit" disabled="@(string.IsNullOrWhiteSpace(newTodo.Title) || InProgress)">
                        @if (IsSubmitting)
                        {
                            <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                            <span role="status">Adding...</span>
                        }
                        else
                        {
                            <span>Add</span>
                        }
                    </button>
                    <BoostrapValidationMessage For="@(() => newTodo.Title)" />
                </div>
            </div>
        </EditForm>
        <div class="list-group">
            @if (IsReading)
            {
                <ul class="list-group mt-3 placeholder-glow">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span class="placeholder w-75">Progress</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span class="placeholder w-50">Progress</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span class="placeholder col-10">Progress</span>
                    </li>
                </ul>
            }
            else if (todos != null)
            {
                @if (todos.Count == 0)
                {
                    <div class="alert alert-info">
                        No tasks yet. Add one above!
                    </div>
                }
                else
                {
                    <ul class="list-group mt-3">
                        @foreach (var todoItem in todos.Items)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <input type="checkbox" @bind="todoItem.IsCompleted" class="me-2" @oninput="@((e) => UpdateItemStatusAsync(todoItem, e))" disabled="@InProgress" />
                                    <span class="@(todoItem.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                                        @todoItem.Title
                                    </span>
                                </div>
                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveTodo(todoItem)" disabled="@InProgress">
                                    Delete
                                </button>
                            </li>
                        }
                    </ul>
                    <ModelDataPager InProgress="InProgress" List="todos"></ModelDataPager>
                }
            }
        </div>
        <div class="d-grid gap-2 d-sm-flex justify-content-end p-2">
            <button type="button" class="btn btn-danger" disabled="@InProgress" @onclick="TriggerErrorAsync">Trigger Error</button>
        </div>
    </div>
</div>

@code {
    [Inject]
    ITodoService Service { get; set; }

    [Inject]
    IScopeManager Manager { get; set; }

    IScopeLog log;

    private TodoItem newTodo = new TodoItem { Id = "None" };
    private ModelList<TodoItem> todos = null;
    private ServiceResultValidationEx<BootstrapFieldCssClassProvider> nameValidator;

    private void HandleInput(ChangeEventArgs e)
    {
        newTodo.Title = e.Value.ToString();
    }

    private async Task UpdateItemStatusAsync(TodoItem item, ChangeEventArgs e)
    {
        item.IsCompleted = (bool)e.Value;
        await this.ServiceSubmitAsync(async () => await Service.UpdateAsync(item),
        (t) =>
        {
            todos = t;
        },
        null,
        (e) =>
        {
            item.IsCompleted = !item.IsCompleted; //rollback
            return false; //false to show the main error message
        });
    }

    protected override async Task OnInitializedAsync()
    {
        log = Manager.CreateLogger(this);

        await base.OnInitializedAsync();

        using (log.DebugScope("ServiceReadAsync"))
        {
            await this.ServiceReadAsync(async () => await Service.GetItemsAsync(null, null, null), (e) => todos = e, nameof(todos));
        }
    }

    private async Task AddTodo()
    {
        await this.ServiceSubmitAsync(async () => await Service.AddAsync(newTodo),
        (t) =>
        {
            todos = t;
            newTodo = new TodoItem() { Id = "None" };
        },
        null,
        (e) =>
        {
            return nameValidator.DisplayErrors(e);
        });
    }

    private async Task RemoveTodo(TodoItem todo)
    {
        await this.ServiceSubmitAsync(async () => await Service.DeleteAsync(todo.Id),
        (t) =>
        {
            todos = t;
        });
    }

    private async Task TriggerErrorAsync()
    {
        await this.ServiceSubmitAsync<TodoItem>(async () => throw new Exception("An error occurred in the service."), (e) => { /*Do nothing*/});
    }
}
